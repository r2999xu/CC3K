#include "chamber.h"
#include "posn.h"
#include <iostream>

const std::vector<Posn> BOUNDARY_0 = {{2, 2}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {2, 7}, {2, 8}, {2, 9}, {2, 10}, {2, 11}, {2, 12}, {2, 13}, {2, 14}, {2, 15}, {2, 16}, {2, 17}, {2, 18}, {2, 19}, {2, 20}, {2, 21}, {2, 22}, {2, 23}, {2, 24}, {2, 25}, {2, 26}, {2, 27}, {2, 28}, {2, 29}, {3, 29}, {4, 29}, {5, 29}, {6, 29}, {7, 29}, {7, 28}, {7, 27}, {7, 26}, {7, 25}, {7, 24}, {7, 23}, {7, 22}, {7, 21}, {7, 20}, {7, 19}, {7, 18}, {7, 17}, {7, 16}, {7, 15}, {7, 14}, {7, 13}, {7, 12}, {7, 11}, {7, 10}, {7, 9}, {7, 8}, {7, 7}, {7, 6}, {7, 5}, {7, 4}, {7, 3}, {7, 2}, {6, 2}, {5, 2}, {4, 2}, {3, 2}};
const std::vector<Posn> BOUNDARY_1 = {{2, 38}, {2, 39}, {2, 40}, {2, 41}, {2, 42}, {2, 43}, {2, 44}, {2, 45}, {2, 46}, {2, 47}, {2, 48}, {2, 49}, {2, 50}, {2, 51}, {2, 52}, {2, 53}, {2, 54}, {2, 55}, {2, 56}, {2, 57}, {2, 58}, {2, 59}, {2, 60}, {2, 61}, {2, 62}, {3, 62}, {4, 62}, {4, 63}, {4, 64}, {4, 65}, {4, 66}, {4, 67}, {4, 68}, {4, 69}, {4, 70}, {5, 70}, {5, 71}, {5, 72}, {5, 73}, {6, 73}, {6, 74}, {6, 75}, {6, 76}, {7, 76}, {8, 76}, {9, 76}, {10, 76}, {11, 76}, {12, 76}, {13, 76}, {13, 75}, {13, 74}, {13, 73}, {13, 72}, {13, 71}, {13, 70}, {13, 69}, {13, 68}, {13, 67}, {13, 66}, {13, 65}, {13, 64}, {13, 63}, {13, 62}, {13, 61}, {13, 60}, {12, 60}, {11, 60}, {10, 60}, {9, 60}, {8, 60}, {7, 60}, {7, 59}, {7, 58}, {7, 57}, {7, 56}, {7, 55}, {7, 54}, {7, 53}, {7, 52}, {7, 51}, {7, 50}, {7, 49}, {7, 48}, {7, 47}, {7, 46}, {7, 45}, {7, 44}, {7, 43}, {7, 42}, {7, 41}, {7, 40}, {7, 39}, {7, 38}, {6, 38}, {5, 38}, {4, 38}, {3, 38}};
const std::vector<Posn> BOUNDARY_2 = {{9, 37}, {9, 38}, {9, 39}, {9, 40}, {9, 41}, {9, 42}, {9, 43}, {9, 44}, {9, 45}, {9, 46}, {9, 47}, {9, 48}, {9, 49}, {9, 50}, {10, 50}, {11, 50}, {12, 50}, {13, 50}, {13, 49}, {13, 48}, {13, 47}, {13, 46}, {13, 45}, {13, 44}, {13, 43}, {13, 42}, {13, 41}, {13, 40}, {13, 39}, {13, 38}, {13, 37}, {12, 37}, {11, 37}, {10, 37}};
const std::vector<Posn> BOUNDARY_3 = {{14, 3}, {14, 4}, {14, 5}, {14, 6}, {14, 7}, {14, 8}, {14, 9}, {14, 10}, {14, 11}, {14, 12}, {14, 13}, {14, 14}, {14, 15}, {14, 16}, {14, 17}, {14, 18}, {14, 19}, {14, 20}, {14, 21}, {14, 22}, {14, 23}, {14, 24}, {14, 25}, {15, 25}, {16, 25}, {17, 25}, {18, 25}, {19, 25}, {20, 25}, {21, 25}, {22, 25}, {22, 24}, {22, 23}, {22, 22}, {22, 21}, {22, 20}, {22, 19}, {22, 18}, {22, 17}, {22, 16}, {22, 15}, {22, 14}, {22, 13}, {22, 12}, {22, 11}, {22, 10}, {22, 9}, {22, 8}, {22, 7}, {22, 6}, {22, 5}, {22, 4}, {22, 3}, {21, 3}, {20, 3}, {19, 3}, {18, 3}, {17, 3}, {16, 3}, {15, 3}};
const std::vector<Posn> BOUNDARY_4 = {{18, 36}, {18, 37}, {18, 38}, {18, 39}, {18, 40}, {18, 41}, {18, 42}, {18, 43}, {18, 44}, {18, 45}, {18, 46}, {18, 47}, {18, 48}, {18, 49}, {18, 50}, {18, 51}, {18, 52}, {18, 53}, {18, 54}, {18, 55}, {18, 56}, {18, 57}, {18, 58}, {18, 59}, {18, 60}, {18, 61}, {18, 62}, {18, 63}, {18, 64}, {17, 64}, {16, 64}, {15, 64}, {15, 65}, {15, 66}, {15, 67}, {15, 68}, {15, 69}, {15, 70}, {15, 71}, {15, 72}, {15, 73}, {15, 74}, {15, 75}, {15, 76}, {16, 76}, {17, 76}, {18, 76}, {19, 76}, {20, 76}, {21, 76}, {22, 76}, {22, 75}, {22, 74}, {22, 73}, {22, 72}, {22, 71}, {22, 70}, {22, 69}, {22, 68}, {22, 67}, {22, 66}, {22, 65}, {22, 64}, {22, 63}, {22, 62}, {22, 61}, {22, 60}, {22, 59}, {22, 58}, {22, 57}, {22, 56}, {22, 55}, {22, 54}, {22, 53}, {22, 52}, {22, 51}, {22, 50}, {22, 49}, {22, 48}, {22, 47}, {22, 46}, {22, 45}, {22, 44}, {22, 43}, {22, 42}, {22, 41}, {22, 40}, {22, 39}, {22, 38}, {22, 37}, {22, 36}, {21, 36}, {20, 36}, {19, 36}};
const std::vector<Posn> DOORS_0 = {{4,29},{7,13}};
const std::vector<Posn> DOORS_1= {{4,38},{7,43},{13,69}};
const std::vector<Posn> DOORS_2 = {{9,43},{13,43}};
const std::vector<Posn> DOORS_3 = {{14,13},{20,25}};
const std::vector<Posn> DOORS_4 = {{20,36},{18,43},{15,69}};

Chamber::Chamber(int index): index{index}
{
    if (index == 0)
    {
        this->boundary = BOUNDARY_0;
        this->doors = DOORS_0;
    }
    else if (index == 1)
    {
        this->boundary = BOUNDARY_1;
        this->doors = DOORS_1;
    }
    else if (index == 2)
    {
        this->boundary = BOUNDARY_2;
        this->doors = DOORS_2;
    }
    else if (index == 3)
    {
        this->boundary = BOUNDARY_3;
        this->doors = DOORS_3;
    }
    else if (index == 4)
    {
        this->boundary = BOUNDARY_4;
        this->doors = DOORS_4;
    }
    else
    {
        std::cerr << "Invalid Chamber Index: " << index << std::endl;
        throw "Invalid Chamber Index";
    }
    this->inside = std::vector<Posn>{};
    for (int i = 0; i < 25; i++) {
        for (int j = 0; j < 80; j++) {
            Posn pos = Posn{i,j};
            if (this->contains(pos)) {
                this->inside.emplace_back(pos);
            }
        }
    }
}

bool Chamber::contains(Posn pos)
{
    int counter = 0;
    for (auto p : this->boundary)
    {
        if (p.y > pos.y && p.x == pos.x)
        {
            counter++;
            break;
        }
    }
    for (auto p : this->boundary)
    {
        if (p.y < pos.y && p.x == pos.x)
        {
            counter++;
            break;
        }
    }
    for (auto p : this->boundary)
    {
        if (p.y == pos.y && p.x > pos.x)
        {
            counter++;
            break;
        }
    }
    for (auto p : this->boundary)
    {
        if (p.y == pos.y && p.x < pos.x)
        {
            counter++;
            break;
        }
    }
    return counter == 4;
}

/*
int main(int argc, char const *argv[])
{
    Chamber * c1 = new Chamber(1);
    Posn p1 = Posn{0,0};
    std::cout << c1->contains(p1) << std::endl;
    std::cout << c1->inside[1].x << " " << c1->inside[1].y << std::endl;
    delete c1;
    return 0;
}
*/